###############################################################################
#
# TinyFPGA BX constraint file (.pcf)
#
###############################################################################
#
# Copyright (c) 2018, Luke Valenty
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the <project name> project.
#
###############################################################################

####
# TinyFPGA BX information: https://github.com/tinyfpga/TinyFPGA-BX/
####

# It seems as though we have 24 pins...
# If we wanted to design a visual datapath to describe what we learned in Hardware Organization how would we do it?

# Well, we'll need to know exactly how many bits we would like to work with...
# Since most standard RISC pipelines have 5 stages we will start there.

# Instruction Register - Instruction Fetch stage
# Instruction Decoder - Instruction Decode stage
# Instruction Executer - Instruction Execute stage
# Memory Operation - Instruction Memory stage
# Write Back Operation - Instruction Write back stage

# So, 24 pins and 5 stages...
# 24 / 5 floored -> 4 bit pipeline

# Say we get rid of the instruction decode stage from the visualization...

# Now we will have 4 stages that need to be visualized and 24 pins for visualization

# 24 / 4 = 6 bits of visualization. A 6 bit pipeline...



# Left side of board
set_io --warn-no-port PIN[1] A2
set_io --warn-no-port PIN[2] A1
set_io --warn-no-port PIN[3] B1
set_io --warn-no-port PIN[4] C2
set_io --warn-no-port PIN[5] C1
set_io --warn-no-port PIN[6] D2
set_io --warn-no-port PIN[7] D1
set_io --warn-no-port PIN[8] E2
set_io --warn-no-port PIN[9] E1
set_io --warn-no-port PIN[10] G2
set_io --warn-no-port PIN[11] H1
set_io --warn-no-port PIN[12] J1
set_io --warn-no-port PIN[13] H2

# Right side of board
set_io --warn-no-port PIN[14] H9
set_io --warn-no-port PIN[15] D9
set_io --warn-no-port PIN[16] D8
set_io --warn-no-port PIN[17] C9
set_io --warn-no-port PIN[18] A9
set_io --warn-no-port PIN[19] B8
set_io --warn-no-port PIN[20] A8
set_io --warn-no-port PIN[21] B7
set_io --warn-no-port PIN[22] A7
set_io --warn-no-port PIN[23] B6
set_io --warn-no-port PIN[24] A6

# SPI flash interface on bottom of board
set_io --warn-no-port SPI_SS F7
set_io --warn-no-port SPI_SCK G7
set_io --warn-no-port SPI_IO0 G6
set_io --warn-no-port SPI_IO1 H7
set_io --warn-no-port SPI_IO2 H4
set_io --warn-no-port SPI_IO3 J8

# General purpose pins on bottom of board
set_io --warn-no-port PIN_25 G1
set_io --warn-no-port PIN_26 J3
set_io --warn-no-port PIN_27 J4
set_io --warn-no-port PIN_28 G9
set_io --warn-no-port PIN_29 J9
set_io --warn-no-port PIN_30 E8
set_io --warn-no-port PIN_31 J2

# LED
set_io --warn-no-port LED B3

# USB
set_io --warn-no-port USBP B4
set_io --warn-no-port USBN A4
set_io --warn-no-port USBPU A3

# 16MHz clock
set_io --warn-no-port CLK B2 # input
